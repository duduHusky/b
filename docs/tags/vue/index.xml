<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on duduHusky</title>
    <link>https://duduhusky.github.io/tags/vue/</link>
    <description>Recent content in vue on duduHusky</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://duduhusky.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue仿探探拖拽卡片的效果</title>
      <link>https://duduhusky.github.io/2020/vue%E4%BB%BF%E6%8E%A2%E6%8E%A2%E6%8B%96%E6%8B%BD%E5%8D%A1%E7%89%87%E7%9A%84%E6%95%88%E6%9E%9C/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://duduhusky.github.io/2020/vue%E4%BB%BF%E6%8E%A2%E6%8E%A2%E6%8B%96%E6%8B%BD%E5%8D%A1%E7%89%87%E7%9A%84%E6%95%88%E6%9E%9C/</guid>
      <description>类似Tinder和探探的卡片效果的组件，社区中已经非常多了。我这一版除了可以实现和他们一样的效果外。还增加了飞卡的效果，就是类似我的女神邱淑贞这样。
可以将卡片朝任意拖拽方向飞出去，必须得帅是不是！
下面带大家一步步来实现这个效果
转载自掘金: https://juejin.cn/post/6906143905922678797
先叠起来 其实我最早实现这个效果，是在2018年的时候，在weex上实现过一版。原帖请看这里：zhuanlan.zhihu.com/p/37482853
咱们这次不要求在weex里可用，所以叠起来非常简单。
首先让三个卡片按照近大远小的原则分别设置设置z-index，宽和高，比如每一层卡片的宽和高比上一层卡片要缩小20个像素（还有一种做法是通过zoom或者scale来设置远处卡片的缩小级别）。然后加入绝对定位position:absolute和z-index就可以将卡片层叠起来了。
拖动第一张卡 因为只有第一张卡片可以拖动，所以我们只要监听第一张卡片的拖动事件。比如touchstart,touchmove,touchcancel,touchend。
拖动的时候需要注意，在touchstart的时候记录一下手指按下的位置，在touchmove时要减去这个位置，看上去就是点哪儿从哪儿拖。
touchStart:function(e){ var curTouch=e.touches[0]; this.startLeft=curTouch.clientX-this.left; this.startTop=curTouch.clientY-this.top; } touchMove:function(e){ var curTouch=e.touches[0]; this.left=curTouch.clientX-this.startLeft; this.top=curTouch.clientY-this.startTop; } 复制代码 飞出去 要实现超任意拖拽方向飞出去这个效果，需要用到一些数学公式。
计算卡片当前拖拽的坐标和起始坐标的夹角
var angle=Math.atan2((当前坐标.y-起点坐标.y), (当前坐标.x-起点坐标.x)); 复制代码 飞出去的落点x轴坐标通过计算angle的余弦值再乘以力度得出
this.left=Math.cos(angle)*this.throwDistance; 复制代码 飞出去的落点y轴坐标通过计算angle的正弦值再乘以力度得出
this.top=Math.sin(angle)*this.throwDistance; 复制代码 这里咱们做得再完善一些，在拖动结束时去判断一下当前拖动的距离是否足够触发飞卡效果。如果不触发飞卡效果，则触发回位效果。这样的话也可以防止用户误操作。
//计算两点之间的直线距离 getDistance:function(x1, y1, x2, y2) { var _x = Math.abs(x1 - x2); var _y = Math.abs(y1 - y2); return Math.sqrt(_x * _x + _y * _y); } var distance=this.getDistance(0,0,this.left,this.top); if(distance&amp;gt;this.throwTriggerDistance){ this.makeCardThrow(); }else{ this.</description>
    </item>
    
    <item>
      <title>重置vue打印变量显示方式</title>
      <link>https://duduhusky.github.io/2019/vue-console/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://duduhusky.github.io/2019/vue-console/</guid>
      <description>在vue使用console.log()打印变量 会有多余不期望看到的属性 而且展开方式不友好 所以重置一个打印方式：
在main.js文件中添加一下代码
Vue.prototype.print = (obj,type) =&amp;gt; { type = type || &amp;#34;log&amp;#34;; const log = JSON.parse(JSON.stringify(obj)); console[type](log) } 以后打印变量就可以直接使用
this.print(obj) //或者 this.print(obj,&amp;#34;error&amp;#34;) </description>
    </item>
    
    <item>
      <title>Vue中使用axios发送请求</title>
      <link>https://duduhusky.github.io/2019/vue-axios-http/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://duduhusky.github.io/2019/vue-axios-http/</guid>
      <description>首先前端部分 let instance = axios.create({ baseURL: &amp;#39;http://api.xxx.com&amp;#39;, headers: { &amp;#39;Access-Control-Allow-Origin&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;, } }) 后端PHP部分 public function behaviors() { return ArrayHelper::merge([ [ &amp;#39;class&amp;#39; =&amp;gt; Cors::className() ], ], parent::behaviors()); } 主要有几点注意：
 对于跨域请求浏览器一般不会发送身份凭证信息。如果要发送凭证信息，需要设置 XMLHttpRequest 的 withCredentials 属性为 true：withCredentials: true。此时要求服务器的响应信息中携带 Access-Control-Allow-Credentials: true，否则响应内容将不会返回. 对于携带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为“*”。因为请求头携带了 Cookie 信息。要将 Access-Control-Allow-Origin 的值设置为xxx 另外，响应头中也携带了 Set-Cookie 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常   跨域请求想要带上 cookies 必须在请求头里面加上 crossDomain: true withCredentials: true 后端需要添加Access-Control-Allow-Credentials: true
   顺便-&amp;gt;Yii2添加解析json数据
&amp;#39;request&amp;#39; =&amp;gt; [ &amp;#39;parsers&amp;#39; =&amp;gt; [ &amp;#39;application/json&amp;#39; =&amp;gt; &amp;#39;yii\web\JsonParser&amp;#39;, ] ],  </description>
    </item>
    
  </channel>
</rss>