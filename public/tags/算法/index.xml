<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on duduHusky</title>
    <link>https://example.com/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on duduHusky</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://example.com/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图的遍历之深度优先搜索和广度优先搜索</title>
      <link>https://example.com/2020/graph-search/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2020/graph-search/</guid>
      <description>深度优先搜索介绍 图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似。
它的思想：假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。
显然，深度优先搜索是一个递归的过程
深度优先搜索图解 无向图的深度优先搜索 下面以&amp;rdquo;无向图&amp;rdquo;为例，来对深度优先搜索进行演示
对上面的图G1进行深度优先遍历，从顶点A开始
第1步： 访问A。
第2步： 访问(A的邻接点)C。 &amp;gt;在第1步访问A之后，接下来应该访问的是A的邻接点，即&amp;rdquo;C,D,F&amp;rdquo;中的一个。但在本文的实现中，顶点ABCDEFG是按照顺序存储，C在&amp;rdquo;D和F&amp;rdquo;的前面，因此，先访问C。
第3步： 访问(C的邻接点)B。 &amp;gt;在第2步访问C之后，接下来应该访问C的邻接点，即&amp;rdquo;B和D&amp;rdquo;中一个(A已经被访问过，就不算在内)。而由于B在D之前，先访问B。
第4步： 访问(C的邻接点)D。 &amp;gt;在第3步访问了C的邻接点B之后，B没有未被访问的邻接点；因此，返回到访问C的另一个邻接点D。
第5步： 访问(A的邻接点)F。 &amp;gt;前面已经访问了A，并且访问完了&amp;rdquo;A的邻接点B的所有邻接点(包括递归的邻接点在内)&amp;ldquo;；因此，此时返回到访问A的另一个邻接点F。
第6步： 访问(F的邻接点)G。
第7步： 访问(G的邻接点)E
因此访问顺序是：A -&amp;gt; C -&amp;gt; B -&amp;gt; D -&amp;gt; F -&amp;gt; G -&amp;gt; E
有向图的深度优先搜索 下面以&amp;rdquo;有向图&amp;rdquo;为例，来对深度优先搜索进行演示
对上面的图G2进行深度优先遍历，从顶点A开始
第1步： 访问A。
第2步： 访问B。 &amp;gt;在访问了A之后，接下来应该访问的是A的出边的另一个顶点，即顶点B。
第3步： 访问C。 &amp;gt;在访问了B之后，接下来应该访问的是B的出边的另一个顶点，即顶点C,E,F。在本文实现的图中，顶点ABCDEFG按照顺序存储，因此先访问C。
第4步： 访问E。 &amp;gt;接下来访问C的出边的另一个顶点，即顶点E。
第5步： 访问D。 &amp;gt;接下来访问E的出边的另一个顶点，即顶点B,D。顶点B已经被访问过，因此访问顶点D。
第6步： 访问F。 &amp;gt;接下应该回溯&amp;rdquo;访问A的出边的另一个顶点F&amp;rdquo;。
第7步： 访问G。
因此访问顺序是：A -&amp;gt; B -&amp;gt; C -&amp;gt; E -&amp;gt; D -&amp;gt; F -&amp;gt; G</description>
    </item>
    
  </channel>
</rss>